{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0cfe2ac2-2c0a-4a81-a803-57fbd5f02341",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "âœ“ Data loaded successfully from: rawdata_merged_student.csv\n",
      "  Shape: (1044, 33)\n",
      "\n",
      "First few rows:\n",
      "  ,school  sex  age address famsize Pstatus  Medu  Fedu       Mjob  \\\n",
      "0   0,\"GP  F\"\"   18     U\"\"   GT3\"\"     A\"\"     4     4  at_home\"\"   \n",
      "1   1,\"GP  F\"\"   17     U\"\"   GT3\"\"     T\"\"     1     1  at_home\"\"   \n",
      "2   2,\"GP  F\"\"   15     U\"\"   LE3\"\"     T\"\"     1     1  at_home\"\"   \n",
      "3   3,\"GP  F\"\"   15     U\"\"   GT3\"\"     T\"\"     4     2   health\"\"   \n",
      "4   4,\"GP  F\"\"   16     U\"\"   GT3\"\"     T\"\"     3     3    other\"\"   \n",
      "\n",
      "         Fjob  ... famrel freetime  goout  Dalc  Walc health absences    G1  \\\n",
      "0   teacher\"\"  ...      4        3      4     1     1      3        6   5\"\"   \n",
      "1     other\"\"  ...      5        3      3     1     1      3        4   5\"\"   \n",
      "2     other\"\"  ...      4        3      2     2     3      3       10   7\"\"   \n",
      "3  services\"\"  ...      3        2      2     1     1      5        2  15\"\"   \n",
      "4     other\"\"  ...      4        3      2     1     2      5        4   6\"\"   \n",
      "\n",
      "     G2 G3,Unnamed: 0  \n",
      "0   6\"\"           6\",  \n",
      "1   5\"\"           6\",  \n",
      "2   8\"\"          10\",  \n",
      "3  14\"\"          15\",  \n",
      "4  10\"\"          10\",  \n",
      "\n",
      "[5 rows x 33 columns]\n",
      "\n",
      "Categorical columns found: [',school', 'sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob', 'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'G1', 'G2', 'G3,Unnamed: 0']\n",
      "Numerical columns: ['age', 'Medu', 'Fedu', 'traveltime', 'studytime', 'failures', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']\n",
      "\n",
      "================================================================================\n",
      "METHOD 1: ONE-HOT ENCODING\n",
      "================================================================================\n",
      "\n",
      "One-Hot Encoded Shape: (1044, 1451)\n",
      "Column count increased from 33 to 1451\n",
      "\n",
      "First few rows of encoded data:\n",
      "   age  Medu  Fedu  traveltime  studytime  failures  famrel  freetime  goout  \\\n",
      "0   18     4     4           2          2         0       4         3      4   \n",
      "1   17     1     1           1          2         0       5         3      3   \n",
      "2   15     1     1           1          2         3       4         3      2   \n",
      "3   15     4     2           1          3         0       3         2      2   \n",
      "4   16     3     3           1          2         0       4         3      2   \n",
      "\n",
      "   Dalc  ...  G3,Unnamed: 0_9\",571.0  G3,Unnamed: 0_9\",579.0  \\\n",
      "0     1  ...                       0                       0   \n",
      "1     1  ...                       0                       0   \n",
      "2     2  ...                       0                       0   \n",
      "3     1  ...                       0                       0   \n",
      "4     1  ...                       0                       0   \n",
      "\n",
      "   G3,Unnamed: 0_9\",588.0  G3,Unnamed: 0_9\",622.0  G3,Unnamed: 0_9\",624.0  \\\n",
      "0                       0                       0                       0   \n",
      "1                       0                       0                       0   \n",
      "2                       0                       0                       0   \n",
      "3                       0                       0                       0   \n",
      "4                       0                       0                       0   \n",
      "\n",
      "   G3,Unnamed: 0_9\",629.0  G3,Unnamed: 0_9\",632.0  G3,Unnamed: 0_9\",635.0  \\\n",
      "0                       0                       0                       0   \n",
      "1                       0                       0                       0   \n",
      "2                       0                       0                       0   \n",
      "3                       0                       0                       0   \n",
      "4                       0                       0                       0   \n",
      "\n",
      "   G3,Unnamed: 0_9\",646.0  G3,Unnamed: 0_9\",81.0  \n",
      "0                       0                      0  \n",
      "1                       0                      0  \n",
      "2                       0                      0  \n",
      "3                       0                      0  \n",
      "4                       0                      0  \n",
      "\n",
      "[5 rows x 1451 columns]\n",
      "\n",
      "One-hot encoded data saved to: data\\student_onehot_encoded.csv\n",
      "\n",
      "================================================================================\n",
      "METHOD 2: LABEL ENCODING\n",
      "================================================================================\n",
      "\n",
      ",school: {'0,\"GP': np.int64(0), '1,\"GP': np.int64(1), '10,\"GP': np.int64(2), '100,\"GP': np.int64(3), '101,\"GP': np.int64(4), '102,\"GP': np.int64(5), '103,\"GP': np.int64(6), '104,\"GP': np.int64(7), '105,\"GP': np.int64(8), '106,\"GP': np.int64(9), '107,\"GP': np.int64(10), '108,\"GP': np.int64(11), '109,\"GP': np.int64(12), '11,\"GP': np.int64(13), '110,\"GP': np.int64(14), '111,\"GP': np.int64(15), '112,\"GP': np.int64(16), '113,\"GP': np.int64(17), '114,\"GP': np.int64(18), '115,\"GP': np.int64(19), '116,\"GP': np.int64(20), '117,\"GP': np.int64(21), '118,\"GP': np.int64(22), '119,\"GP': np.int64(23), '12,\"GP': np.int64(24), '120,\"GP': np.int64(25), '121,\"GP': np.int64(26), '122,\"GP': np.int64(27), '123,\"GP': np.int64(28), '124,\"GP': np.int64(29), '125,\"GP': np.int64(30), '126,\"GP': np.int64(31), '127,\"GP': np.int64(32), '128,\"GP': np.int64(33), '129,\"GP': np.int64(34), '13,\"GP': np.int64(35), '130,\"GP': np.int64(36), '131,\"GP': np.int64(37), '132,\"GP': np.int64(38), '133,\"GP': np.int64(39), '134,\"GP': np.int64(40), '135,\"GP': np.int64(41), '136,\"GP': np.int64(42), '137,\"GP': np.int64(43), '138,\"GP': np.int64(44), '139,\"GP': np.int64(45), '14,\"GP': np.int64(46), '140,\"GP': np.int64(47), '141,\"GP': np.int64(48), '142,\"GP': np.int64(49), '143,\"GP': np.int64(50), '144,\"GP': np.int64(51), '145,\"GP': np.int64(52), '146,\"GP': np.int64(53), '147,\"GP': np.int64(54), '148,\"GP': np.int64(55), '149,\"GP': np.int64(56), '15,\"GP': np.int64(57), '150,\"GP': np.int64(58), '151,\"GP': np.int64(59), '152,\"GP': np.int64(60), '153,\"GP': np.int64(61), '154,\"GP': np.int64(62), '155,\"GP': np.int64(63), '156,\"GP': np.int64(64), '157,\"GP': np.int64(65), '158,\"GP': np.int64(66), '159,\"GP': np.int64(67), '16,\"GP': np.int64(68), '160,\"GP': np.int64(69), '161,\"GP': np.int64(70), '162,\"GP': np.int64(71), '163,\"GP': np.int64(72), '164,\"GP': np.int64(73), '165,\"GP': np.int64(74), '166,\"GP': np.int64(75), '167,\"GP': np.int64(76), '168,\"GP': np.int64(77), '169,\"GP': np.int64(78), '17,\"GP': np.int64(79), '170,\"GP': np.int64(80), '171,\"GP': np.int64(81), '172,\"GP': np.int64(82), '173,\"GP': np.int64(83), '174,\"GP': np.int64(84), '175,\"GP': np.int64(85), '176,\"GP': np.int64(86), '177,\"GP': np.int64(87), '178,\"GP': np.int64(88), '179,\"GP': np.int64(89), '18,\"GP': np.int64(90), '180,\"GP': np.int64(91), '181,\"GP': np.int64(92), '182,\"GP': np.int64(93), '183,\"GP': np.int64(94), '184,\"GP': np.int64(95), '185,\"GP': np.int64(96), '186,\"GP': np.int64(97), '187,\"GP': np.int64(98), '188,\"GP': np.int64(99), '189,\"GP': np.int64(100), '19,\"GP': np.int64(101), '190,\"GP': np.int64(102), '191,\"GP': np.int64(103), '192,\"GP': np.int64(104), '193,\"GP': np.int64(105), '194,\"GP': np.int64(106), '195,\"GP': np.int64(107), '196,\"GP': np.int64(108), '197,\"GP': np.int64(109), '198,\"GP': np.int64(110), '199,\"GP': np.int64(111), '2,\"GP': np.int64(112), '20,\"GP': np.int64(113), '200,\"GP': np.int64(114), '201,\"GP': np.int64(115), '202,\"GP': np.int64(116), '203,\"GP': np.int64(117), '204,\"GP': np.int64(118), '205,\"GP': np.int64(119), '206,\"GP': np.int64(120), '207,\"GP': np.int64(121), '208,\"GP': np.int64(122), '209,\"GP': np.int64(123), '21,\"GP': np.int64(124), '210,\"GP': np.int64(125), '211,\"GP': np.int64(126), '212,\"GP': np.int64(127), '213,\"GP': np.int64(128), '214,\"GP': np.int64(129), '215,\"GP': np.int64(130), '216,\"GP': np.int64(131), '217,\"GP': np.int64(132), '218,\"GP': np.int64(133), '219,\"GP': np.int64(134), '22,\"GP': np.int64(135), '220,\"GP': np.int64(136), '221,\"GP': np.int64(137), '222,\"GP': np.int64(138), '223,\"GP': np.int64(139), '224,\"GP': np.int64(140), '225,\"GP': np.int64(141), '226,\"GP': np.int64(142), '227,\"GP': np.int64(143), '228,\"GP': np.int64(144), '229,\"GP': np.int64(145), '23,\"GP': np.int64(146), '230,\"GP': np.int64(147), '231,\"GP': np.int64(148), '232,\"GP': np.int64(149), '233,\"GP': np.int64(150), '234,\"GP': np.int64(151), '235,\"GP': np.int64(152), '236,\"GP': np.int64(153), '237,\"GP': np.int64(154), '238,\"GP': np.int64(155), '239,\"GP': np.int64(156), '24,\"GP': np.int64(157), '240,\"GP': np.int64(158), '241,\"GP': np.int64(159), '242,\"GP': np.int64(160), '243,\"GP': np.int64(161), '244,\"GP': np.int64(162), '245,\"GP': np.int64(163), '246,\"GP': np.int64(164), '247,\"GP': np.int64(165), '248,\"GP': np.int64(166), '249,\"GP': np.int64(167), '25,\"GP': np.int64(168), '250,\"GP': np.int64(169), '251,\"GP': np.int64(170), '252,\"GP': np.int64(171), '253,\"GP': np.int64(172), '254,\"GP': np.int64(173), '255,\"GP': np.int64(174), '256,\"GP': np.int64(175), '257,\"GP': np.int64(176), '258,\"GP': np.int64(177), '259,\"GP': np.int64(178), '26,\"GP': np.int64(179), '260,\"GP': np.int64(180), '261,\"GP': np.int64(181), '262,\"GP': np.int64(182), '263,\"GP': np.int64(183), '264,\"GP': np.int64(184), '265,\"GP': np.int64(185), '266,\"GP': np.int64(186), '267,\"GP': np.int64(187), '268,\"GP': np.int64(188), '269,\"GP': np.int64(189), '27,\"GP': np.int64(190), '270,\"GP': np.int64(191), '271,\"GP': np.int64(192), '272,\"GP': np.int64(193), '273,\"GP': np.int64(194), '274,\"GP': np.int64(195), '275,\"GP': np.int64(196), '276,\"GP': np.int64(197), '277,\"GP': np.int64(198), '278,\"GP': np.int64(199), '279,\"GP': np.int64(200), '28,\"GP': np.int64(201), '280,\"GP': np.int64(202), '281,\"GP': np.int64(203), '282,\"GP': np.int64(204), '283,\"GP': np.int64(205), '284,\"GP': np.int64(206), '285,\"GP': np.int64(207), '286,\"GP': np.int64(208), '287,\"GP': np.int64(209), '288,\"GP': np.int64(210), '289,\"GP': np.int64(211), '29,\"GP': np.int64(212), '290,\"GP': np.int64(213), '291,\"GP': np.int64(214), '292,\"GP': np.int64(215), '293,\"GP': np.int64(216), '294,\"GP': np.int64(217), '295,\"GP': np.int64(218), '296,\"GP': np.int64(219), '297,\"GP': np.int64(220), '298,\"GP': np.int64(221), '299,\"GP': np.int64(222), '3,\"GP': np.int64(223), '30,\"GP': np.int64(224), '300,\"GP': np.int64(225), '301,\"GP': np.int64(226), '302,\"GP': np.int64(227), '303,\"GP': np.int64(228), '304,\"GP': np.int64(229), '305,\"GP': np.int64(230), '306,\"GP': np.int64(231), '307,\"GP': np.int64(232), '308,\"GP': np.int64(233), '309,\"GP': np.int64(234), '31,\"GP': np.int64(235), '310,\"GP': np.int64(236), '311,\"GP': np.int64(237), '312,\"GP': np.int64(238), '313,\"GP': np.int64(239), '314,\"GP': np.int64(240), '315,\"GP': np.int64(241), '316,\"GP': np.int64(242), '317,\"GP': np.int64(243), '318,\"GP': np.int64(244), '319,\"GP': np.int64(245), '32,\"GP': np.int64(246), '320,\"GP': np.int64(247), '321,\"GP': np.int64(248), '322,\"GP': np.int64(249), '323,\"GP': np.int64(250), '324,\"GP': np.int64(251), '325,\"GP': np.int64(252), '326,\"GP': np.int64(253), '327,\"GP': np.int64(254), '328,\"GP': np.int64(255), '329,\"GP': np.int64(256), '33,\"GP': np.int64(257), '330,\"GP': np.int64(258), '331,\"GP': np.int64(259), '332,\"GP': np.int64(260), '333,\"GP': np.int64(261), '334,\"GP': np.int64(262), '335,\"GP': np.int64(263), '336,\"GP': np.int64(264), '337,\"GP': np.int64(265), '338,\"GP': np.int64(266), '339,\"GP': np.int64(267), '34,\"GP': np.int64(268), '340,\"GP': np.int64(269), '341,\"GP': np.int64(270), '342,\"GP': np.int64(271), '343,\"GP': np.int64(272), '344,\"GP': np.int64(273), '345,\"GP': np.int64(274), '346,\"GP': np.int64(275), '347,\"GP': np.int64(276), '348,\"GP': np.int64(277), '349,\"GP': np.int64(278), '349,\"MS': np.int64(279), '35,\"GP': np.int64(280), '350,\"GP': np.int64(281), '350,\"MS': np.int64(282), '351,\"GP': np.int64(283), '351,\"MS': np.int64(284), '352,\"GP': np.int64(285), '352,\"MS': np.int64(286), '353,\"GP': np.int64(287), '353,\"MS': np.int64(288), '354,\"GP': np.int64(289), '354,\"MS': np.int64(290), '355,\"GP': np.int64(291), '355,\"MS': np.int64(292), '356,\"GP': np.int64(293), '356,\"MS': np.int64(294), '357,\"GP': np.int64(295), '357,\"MS': np.int64(296), '358,\"GP': np.int64(297), '358,\"MS': np.int64(298), '359,\"GP': np.int64(299), '359,\"MS': np.int64(300), '36,\"GP': np.int64(301), '360,\"GP': np.int64(302), '360,\"MS': np.int64(303), '361,\"GP': np.int64(304), '361,\"MS': np.int64(305), '362,\"GP': np.int64(306), '362,\"MS': np.int64(307), '363,\"GP': np.int64(308), '363,\"MS': np.int64(309), '364,\"GP': np.int64(310), '364,\"MS': np.int64(311), '365,\"GP': np.int64(312), '365,\"MS': np.int64(313), '366,\"GP': np.int64(314), '366,\"MS': np.int64(315), '367,\"GP': np.int64(316), '367,\"MS': np.int64(317), '368,\"GP': np.int64(318), '368,\"MS': np.int64(319), '369,\"GP': np.int64(320), '369,\"MS': np.int64(321), '37,\"GP': np.int64(322), '370,\"GP': np.int64(323), '370,\"MS': np.int64(324), '371,\"GP': np.int64(325), '371,\"MS': np.int64(326), '372,\"GP': np.int64(327), '372,\"MS': np.int64(328), '373,\"GP': np.int64(329), '373,\"MS': np.int64(330), '374,\"GP': np.int64(331), '374,\"MS': np.int64(332), '375,\"GP': np.int64(333), '375,\"MS': np.int64(334), '376,\"GP': np.int64(335), '376,\"MS': np.int64(336), '377,\"GP': np.int64(337), '377,\"MS': np.int64(338), '378,\"GP': np.int64(339), '378,\"MS': np.int64(340), '379,\"GP': np.int64(341), '379,\"MS': np.int64(342), '38,\"GP': np.int64(343), '380,\"GP': np.int64(344), '380,\"MS': np.int64(345), '381,\"GP': np.int64(346), '381,\"MS': np.int64(347), '382,\"GP': np.int64(348), '382,\"MS': np.int64(349), '383,\"GP': np.int64(350), '383,\"MS': np.int64(351), '384,\"GP': np.int64(352), '384,\"MS': np.int64(353), '385,\"GP': np.int64(354), '385,\"MS': np.int64(355), '386,\"GP': np.int64(356), '386,\"MS': np.int64(357), '387,\"GP': np.int64(358), '387,\"MS': np.int64(359), '388,\"GP': np.int64(360), '388,\"MS': np.int64(361), '389,\"GP': np.int64(362), '389,\"MS': np.int64(363), '39,\"GP': np.int64(364), '390,\"GP': np.int64(365), '390,\"MS': np.int64(366), '391,\"GP': np.int64(367), '391,\"MS': np.int64(368), '392,\"GP': np.int64(369), '392,\"MS': np.int64(370), '393,\"GP': np.int64(371), '393,\"MS': np.int64(372), '394,\"GP': np.int64(373), '394,\"MS': np.int64(374), '395,\"GP': np.int64(375), '396,\"GP': np.int64(376), '397,\"GP': np.int64(377), '398,\"GP': np.int64(378), '399,\"GP': np.int64(379), '4,\"GP': np.int64(380), '40,\"GP': np.int64(381), '400,\"GP': np.int64(382), '401,\"GP': np.int64(383), '402,\"GP': np.int64(384), '403,\"GP': np.int64(385), '404,\"GP': np.int64(386), '405,\"GP': np.int64(387), '406,\"GP': np.int64(388), '407,\"GP': np.int64(389), '408,\"GP': np.int64(390), '409,\"GP': np.int64(391), '41,\"GP': np.int64(392), '410,\"GP': np.int64(393), '411,\"GP': np.int64(394), '412,\"GP': np.int64(395), '413,\"GP': np.int64(396), '414,\"GP': np.int64(397), '415,\"GP': np.int64(398), '416,\"GP': np.int64(399), '417,\"GP': np.int64(400), '418,\"GP': np.int64(401), '419,\"GP': np.int64(402), '42,\"GP': np.int64(403), '420,\"GP': np.int64(404), '421,\"GP': np.int64(405), '422,\"GP': np.int64(406), '423,\"MS': np.int64(407), '424,\"MS': np.int64(408), '425,\"MS': np.int64(409), '426,\"MS': np.int64(410), '427,\"MS': np.int64(411), '428,\"MS': np.int64(412), '429,\"MS': np.int64(413), '43,\"GP': np.int64(414), '430,\"MS': np.int64(415), '431,\"MS': np.int64(416), '432,\"MS': np.int64(417), '433,\"MS': np.int64(418), '434,\"MS': np.int64(419), '435,\"MS': np.int64(420), '436,\"MS': np.int64(421), '437,\"MS': np.int64(422), '438,\"MS': np.int64(423), '439,\"MS': np.int64(424), '44,\"GP': np.int64(425), '440,\"MS': np.int64(426), '441,\"MS': np.int64(427), '442,\"MS': np.int64(428), '443,\"MS': np.int64(429), '444,\"MS': np.int64(430), '445,\"MS': np.int64(431), '446,\"MS': np.int64(432), '447,\"MS': np.int64(433), '448,\"MS': np.int64(434), '449,\"MS': np.int64(435), '45,\"GP': np.int64(436), '450,\"MS': np.int64(437), '451,\"MS': np.int64(438), '452,\"MS': np.int64(439), '453,\"MS': np.int64(440), '454,\"MS': np.int64(441), '455,\"MS': np.int64(442), '456,\"MS': np.int64(443), '457,\"MS': np.int64(444), '458,\"MS': np.int64(445), '459,\"MS': np.int64(446), '46,\"GP': np.int64(447), '460,\"MS': np.int64(448), '461,\"MS': np.int64(449), '462,\"MS': np.int64(450), '463,\"MS': np.int64(451), '464,\"MS': np.int64(452), '465,\"MS': np.int64(453), '466,\"MS': np.int64(454), '467,\"MS': np.int64(455), '468,\"MS': np.int64(456), '469,\"MS': np.int64(457), '47,\"GP': np.int64(458), '470,\"MS': np.int64(459), '471,\"MS': np.int64(460), '472,\"MS': np.int64(461), '473,\"MS': np.int64(462), '474,\"MS': np.int64(463), '475,\"MS': np.int64(464), '476,\"MS': np.int64(465), '477,\"MS': np.int64(466), '478,\"MS': np.int64(467), '479,\"MS': np.int64(468), '48,\"GP': np.int64(469), '480,\"MS': np.int64(470), '481,\"MS': np.int64(471), '482,\"MS': np.int64(472), '483,\"MS': np.int64(473), '484,\"MS': np.int64(474), '485,\"MS': np.int64(475), '486,\"MS': np.int64(476), '487,\"MS': np.int64(477), '488,\"MS': np.int64(478), '489,\"MS': np.int64(479), '49,\"GP': np.int64(480), '490,\"MS': np.int64(481), '491,\"MS': np.int64(482), '492,\"MS': np.int64(483), '493,\"MS': np.int64(484), '494,\"MS': np.int64(485), '495,\"MS': np.int64(486), '496,\"MS': np.int64(487), '497,\"MS': np.int64(488), '498,\"MS': np.int64(489), '499,\"MS': np.int64(490), '5,\"GP': np.int64(491), '50,\"GP': np.int64(492), '500,\"MS': np.int64(493), '501,\"MS': np.int64(494), '502,\"MS': np.int64(495), '503,\"MS': np.int64(496), '504,\"MS': np.int64(497), '505,\"MS': np.int64(498), '506,\"MS': np.int64(499), '507,\"MS': np.int64(500), '508,\"MS': np.int64(501), '509,\"MS': np.int64(502), '51,\"GP': np.int64(503), '510,\"MS': np.int64(504), '511,\"MS': np.int64(505), '512,\"MS': np.int64(506), '513,\"MS': np.int64(507), '514,\"MS': np.int64(508), '515,\"MS': np.int64(509), '516,\"MS': np.int64(510), '517,\"MS': np.int64(511), '518,\"MS': np.int64(512), '519,\"MS': np.int64(513), '52,\"GP': np.int64(514), '520,\"MS': np.int64(515), '521,\"MS': np.int64(516), '522,\"MS': np.int64(517), '523,\"MS': np.int64(518), '524,\"MS': np.int64(519), '525,\"MS': np.int64(520), '526,\"MS': np.int64(521), '527,\"MS': np.int64(522), '528,\"MS': np.int64(523), '529,\"MS': np.int64(524), '53,\"GP': np.int64(525), '530,\"MS': np.int64(526), '531,\"MS': np.int64(527), '532,\"MS': np.int64(528), '533,\"MS': np.int64(529), '534,\"MS': np.int64(530), '535,\"MS': np.int64(531), '536,\"MS': np.int64(532), '537,\"MS': np.int64(533), '538,\"MS': np.int64(534), '539,\"MS': np.int64(535), '54,\"GP': np.int64(536), '540,\"MS': np.int64(537), '541,\"MS': np.int64(538), '542,\"MS': np.int64(539), '543,\"MS': np.int64(540), '544,\"MS': np.int64(541), '545,\"MS': np.int64(542), '546,\"MS': np.int64(543), '547,\"MS': np.int64(544), '548,\"MS': np.int64(545), '549,\"MS': np.int64(546), '55,\"GP': np.int64(547), '550,\"MS': np.int64(548), '551,\"MS': np.int64(549), '552,\"MS': np.int64(550), '553,\"MS': np.int64(551), '554,\"MS': np.int64(552), '555,\"MS': np.int64(553), '556,\"MS': np.int64(554), '557,\"MS': np.int64(555), '558,\"MS': np.int64(556), '559,\"MS': np.int64(557), '56,\"GP': np.int64(558), '560,\"MS': np.int64(559), '561,\"MS': np.int64(560), '562,\"MS': np.int64(561), '563,\"MS': np.int64(562), '564,\"MS': np.int64(563), '565,\"MS': np.int64(564), '566,\"MS': np.int64(565), '567,\"MS': np.int64(566), '568,\"MS': np.int64(567), '569,\"MS': np.int64(568), '57,\"GP': np.int64(569), '570,\"MS': np.int64(570), '571,\"MS': np.int64(571), '572,\"MS': np.int64(572), '573,\"MS': np.int64(573), '574,\"MS': np.int64(574), '575,\"MS': np.int64(575), '576,\"MS': np.int64(576), '577,\"MS': np.int64(577), '578,\"MS': np.int64(578), '579,\"MS': np.int64(579), '58,\"GP': np.int64(580), '580,\"MS': np.int64(581), '581,\"MS': np.int64(582), '582,\"MS': np.int64(583), '583,\"MS': np.int64(584), '584,\"MS': np.int64(585), '585,\"MS': np.int64(586), '586,\"MS': np.int64(587), '587,\"MS': np.int64(588), '588,\"MS': np.int64(589), '589,\"MS': np.int64(590), '59,\"GP': np.int64(591), '590,\"MS': np.int64(592), '591,\"MS': np.int64(593), '592,\"MS': np.int64(594), '593,\"MS': np.int64(595), '594,\"MS': np.int64(596), '595,\"MS': np.int64(597), '596,\"MS': np.int64(598), '597,\"MS': np.int64(599), '598,\"MS': np.int64(600), '599,\"MS': np.int64(601), '6,\"GP': np.int64(602), '60,\"GP': np.int64(603), '600,\"MS': np.int64(604), '601,\"MS': np.int64(605), '602,\"MS': np.int64(606), '603,\"MS': np.int64(607), '604,\"MS': np.int64(608), '605,\"MS': np.int64(609), '606,\"MS': np.int64(610), '607,\"MS': np.int64(611), '608,\"MS': np.int64(612), '609,\"MS': np.int64(613), '61,\"GP': np.int64(614), '610,\"MS': np.int64(615), '611,\"MS': np.int64(616), '612,\"MS': np.int64(617), '613,\"MS': np.int64(618), '614,\"MS': np.int64(619), '615,\"MS': np.int64(620), '616,\"MS': np.int64(621), '617,\"MS': np.int64(622), '618,\"MS': np.int64(623), '619,\"MS': np.int64(624), '62,\"GP': np.int64(625), '620,\"MS': np.int64(626), '621,\"MS': np.int64(627), '622,\"MS': np.int64(628), '623,\"MS': np.int64(629), '624,\"MS': np.int64(630), '625,\"MS': np.int64(631), '626,\"MS': np.int64(632), '627,\"MS': np.int64(633), '628,\"MS': np.int64(634), '629,\"MS': np.int64(635), '63,\"GP': np.int64(636), '630,\"MS': np.int64(637), '631,\"MS': np.int64(638), '632,\"MS': np.int64(639), '633,\"MS': np.int64(640), '634,\"MS': np.int64(641), '635,\"MS': np.int64(642), '636,\"MS': np.int64(643), '637,\"MS': np.int64(644), '638,\"MS': np.int64(645), '639,\"MS': np.int64(646), '64,\"GP': np.int64(647), '640,\"MS': np.int64(648), '641,\"MS': np.int64(649), '642,\"MS': np.int64(650), '643,\"MS': np.int64(651), '644,\"MS': np.int64(652), '645,\"MS': np.int64(653), '646,\"MS': np.int64(654), '647,\"MS': np.int64(655), '648,\"MS': np.int64(656), '65,\"GP': np.int64(657), '66,\"GP': np.int64(658), '67,\"GP': np.int64(659), '68,\"GP': np.int64(660), '69,\"GP': np.int64(661), '7,\"GP': np.int64(662), '70,\"GP': np.int64(663), '71,\"GP': np.int64(664), '72,\"GP': np.int64(665), '73,\"GP': np.int64(666), '74,\"GP': np.int64(667), '75,\"GP': np.int64(668), '76,\"GP': np.int64(669), '77,\"GP': np.int64(670), '78,\"GP': np.int64(671), '79,\"GP': np.int64(672), '8,\"GP': np.int64(673), '80,\"GP': np.int64(674), '81,\"GP': np.int64(675), '82,\"GP': np.int64(676), '83,\"GP': np.int64(677), '84,\"GP': np.int64(678), '85,\"GP': np.int64(679), '86,\"GP': np.int64(680), '87,\"GP': np.int64(681), '88,\"GP': np.int64(682), '89,\"GP': np.int64(683), '9,\"GP': np.int64(684), '90,\"GP': np.int64(685), '91,\"GP': np.int64(686), '92,\"GP': np.int64(687), '93,\"GP': np.int64(688), '94,\"GP': np.int64(689), '95,\"GP': np.int64(690), '96,\"GP': np.int64(691), '97,\"GP': np.int64(692), '98,\"GP': np.int64(693), '99,\"GP': np.int64(694)}\n",
      "\n",
      "sex: {'F\"\"': np.int64(0), 'M\"\"': np.int64(1)}\n",
      "\n",
      "address: {'R\"\"': np.int64(0), 'U\"\"': np.int64(1)}\n",
      "\n",
      "famsize: {'GT3\"\"': np.int64(0), 'LE3\"\"': np.int64(1)}\n",
      "\n",
      "Pstatus: {'A\"\"': np.int64(0), 'T\"\"': np.int64(1)}\n",
      "\n",
      "Mjob: {'at_home\"\"': np.int64(0), 'health\"\"': np.int64(1), 'other\"\"': np.int64(2), 'services\"\"': np.int64(3), 'teacher\"\"': np.int64(4)}\n",
      "\n",
      "Fjob: {'at_home\"\"': np.int64(0), 'health\"\"': np.int64(1), 'other\"\"': np.int64(2), 'services\"\"': np.int64(3), 'teacher\"\"': np.int64(4)}\n",
      "\n",
      "reason: {'course\"\"': np.int64(0), 'home\"\"': np.int64(1), 'other\"\"': np.int64(2), 'reputation\"\"': np.int64(3)}\n",
      "\n",
      "guardian: {'father\"\"': np.int64(0), 'mother\"\"': np.int64(1), 'other\"\"': np.int64(2)}\n",
      "\n",
      "schoolsup: {'no\"\"': np.int64(0), 'yes\"\"': np.int64(1)}\n",
      "\n",
      "famsup: {'no\"\"': np.int64(0), 'yes\"\"': np.int64(1)}\n",
      "\n",
      "paid: {'no\"\"': np.int64(0), 'yes\"\"': np.int64(1)}\n",
      "\n",
      "activities: {'no\"\"': np.int64(0), 'yes\"\"': np.int64(1)}\n",
      "\n",
      "nursery: {'no\"\"': np.int64(0), 'yes\"\"': np.int64(1)}\n",
      "\n",
      "higher: {'no\"\"': np.int64(0), 'yes\"\"': np.int64(1)}\n",
      "\n",
      "internet: {'no\"\"': np.int64(0), 'yes\"\"': np.int64(1)}\n",
      "\n",
      "romantic: {'no\"\"': np.int64(0), 'yes\"\"': np.int64(1)}\n",
      "\n",
      "G1: {'0\"\"': np.int64(0), '10\"\"': np.int64(1), '11\"\"': np.int64(2), '12\"\"': np.int64(3), '13\"\"': np.int64(4), '14\"\"': np.int64(5), '15\"\"': np.int64(6), '16\"\"': np.int64(7), '17\"\"': np.int64(8), '18\"\"': np.int64(9), '19\"\"': np.int64(10), '3\"\"': np.int64(11), '4\"\"': np.int64(12), '5\"\"': np.int64(13), '6\"\"': np.int64(14), '7\"\"': np.int64(15), '8\"\"': np.int64(16), '9\"\"': np.int64(17)}\n",
      "\n",
      "G2: {'0\"\"': np.int64(0), '10\"\"': np.int64(1), '11\"\"': np.int64(2), '12\"\"': np.int64(3), '13\"\"': np.int64(4), '14\"\"': np.int64(5), '15\"\"': np.int64(6), '16\"\"': np.int64(7), '17\"\"': np.int64(8), '18\"\"': np.int64(9), '19\"\"': np.int64(10), '4\"\"': np.int64(11), '5\"\"': np.int64(12), '6\"\"': np.int64(13), '7\"\"': np.int64(14), '8\"\"': np.int64(15), '9\"\"': np.int64(16)}\n",
      "\n",
      "G3,Unnamed: 0: {'0\",': np.int64(0), '0\",163.0': np.int64(1), '0\",440.0': np.int64(2), '0\",519.0': np.int64(3), '0\",563.0': np.int64(4), '0\",567.0': np.int64(5), '0\",583.0': np.int64(6), '0\",586.0': np.int64(7), '0\",597.0': np.int64(8), '0\",603.0': np.int64(9), '0\",605.0': np.int64(10), '0\",610.0': np.int64(11), '0\",626.0': np.int64(12), '0\",637.0': np.int64(13), '0\",639.0': np.int64(14), '0\",640.0': np.int64(15), '1\",172.0': np.int64(16), '10\",': np.int64(17), '10\",103.0': np.int64(18), '10\",105.0': np.int64(19), '10\",106.0': np.int64(20), '10\",112.0': np.int64(21), '10\",114.0': np.int64(22), '10\",140.0': np.int64(23), '10\",145.0': np.int64(24), '10\",146.0': np.int64(25), '10\",157.0': np.int64(26), '10\",164.0': np.int64(27), '10\",169.0': np.int64(28), '10\",173.0': np.int64(29), '10\",176.0': np.int64(30), '10\",184.0': np.int64(31), '10\",186.0': np.int64(32), '10\",191.0': np.int64(33), '10\",203.0': np.int64(34), '10\",207.0': np.int64(35), '10\",23.0': np.int64(36), '10\",230.0': np.int64(37), '10\",231.0': np.int64(38), '10\",237.0': np.int64(39), '10\",24.0': np.int64(40), '10\",251.0': np.int64(41), '10\",253.0': np.int64(42), '10\",254.0': np.int64(43), '10\",259.0': np.int64(44), '10\",264.0': np.int64(45), '10\",274.0': np.int64(46), '10\",280.0': np.int64(47), '10\",283.0': np.int64(48), '10\",287.0': np.int64(49), '10\",297.0': np.int64(50), '10\",310.0': np.int64(51), '10\",318.0': np.int64(52), '10\",322.0': np.int64(53), '10\",323.0': np.int64(54), '10\",325.0': np.int64(55), '10\",361.0': np.int64(56), '10\",371.0': np.int64(57), '10\",373.0': np.int64(58), '10\",379.0': np.int64(59), '10\",384.0': np.int64(60), '10\",385.0': np.int64(61), '10\",40.0': np.int64(62), '10\",413.0': np.int64(63), '10\",421.0': np.int64(64), '10\",425.0': np.int64(65), '10\",43.0': np.int64(66), '10\",431.0': np.int64(67), '10\",435.0': np.int64(68), '10\",459.0': np.int64(69), '10\",473.0': np.int64(70), '10\",479.0': np.int64(71), '10\",480.0': np.int64(72), '10\",486.0': np.int64(73), '10\",487.0': np.int64(74), '10\",489.0': np.int64(75), '10\",490.0': np.int64(76), '10\",492.0': np.int64(77), '10\",493.0': np.int64(78), '10\",497.0': np.int64(79), '10\",506.0': np.int64(80), '10\",507.0': np.int64(81), '10\",511.0': np.int64(82), '10\",515.0': np.int64(83), '10\",521.0': np.int64(84), '10\",527.0': np.int64(85), '10\",531.0': np.int64(86), '10\",535.0': np.int64(87), '10\",539.0': np.int64(88), '10\",552.0': np.int64(89), '10\",554.0': np.int64(90), '10\",557.0': np.int64(91), '10\",558.0': np.int64(92), '10\",560.0': np.int64(93), '10\",561.0': np.int64(94), '10\",564.0': np.int64(95), '10\",573.0': np.int64(96), '10\",574.0': np.int64(97), '10\",575.0': np.int64(98), '10\",578.0': np.int64(99), '10\",580.0': np.int64(100), '10\",589.0': np.int64(101), '10\",601.0': np.int64(102), '10\",604.0': np.int64(103), '10\",613.0': np.int64(104), '10\",62.0': np.int64(105), '10\",625.0': np.int64(106), '10\",627.0': np.int64(107), '10\",643.0': np.int64(108), '10\",644.0': np.int64(109), '10\",647.0': np.int64(110), '10\",67.0': np.int64(111), '10\",71.0': np.int64(112), '10\",78.0': np.int64(113), '10\",89.0': np.int64(114), '11\",': np.int64(115), '11\",0.0': np.int64(116), '11\",1.0': np.int64(117), '11\",108.0': np.int64(118), '11\",111.0': np.int64(119), '11\",118.0': np.int64(120), '11\",124.0': np.int64(121), '11\",126.0': np.int64(122), '11\",127.0': np.int64(123), '11\",132.0': np.int64(124), '11\",136.0': np.int64(125), '11\",137.0': np.int64(126), '11\",138.0': np.int64(127), '11\",143.0': np.int64(128), '11\",144.0': np.int64(129), '11\",149.0': np.int64(130), '11\",152.0': np.int64(131), '11\",154.0': np.int64(132), '11\",158.0': np.int64(133), '11\",160.0': np.int64(134), '11\",162.0': np.int64(135), '11\",166.0': np.int64(136), '11\",170.0': np.int64(137), '11\",171.0': np.int64(138), '11\",180.0': np.int64(139), '11\",189.0': np.int64(140), '11\",192.0': np.int64(141), '11\",194.0': np.int64(142), '11\",200.0': np.int64(143), '11\",213.0': np.int64(144), '11\",227.0': np.int64(145), '11\",228.0': np.int64(146), '11\",234.0': np.int64(147), '11\",241.0': np.int64(148), '11\",242.0': np.int64(149), '11\",260.0': np.int64(150), '11\",27.0': np.int64(151), '11\",273.0': np.int64(152), '11\",275.0': np.int64(153), '11\",277.0': np.int64(154), '11\",281.0': np.int64(155), '11\",290.0': np.int64(156), '11\",291.0': np.int64(157), '11\",30.0': np.int64(158), '11\",301.0': np.int64(159), '11\",324.0': np.int64(160), '11\",35.0': np.int64(161), '11\",350.0': np.int64(162), '11\",352.0': np.int64(163), '11\",353.0': np.int64(164), '11\",368.0': np.int64(165), '11\",369.0': np.int64(166), '11\",382.0': np.int64(167), '11\",405.0': np.int64(168), '11\",41.0': np.int64(169), '11\",415.0': np.int64(170), '11\",419.0': np.int64(171), '11\",423.0': np.int64(172), '11\",426.0': np.int64(173), '11\",429.0': np.int64(174), '11\",430.0': np.int64(175), '11\",434.0': np.int64(176), '11\",44.0': np.int64(177), '11\",444.0': np.int64(178), '11\",446.0': np.int64(179), '11\",45.0': np.int64(180), '11\",451.0': np.int64(181), '11\",452.0': np.int64(182), '11\",457.0': np.int64(183), '11\",460.0': np.int64(184), '11\",464.0': np.int64(185), '11\",466.0': np.int64(186), '11\",474.0': np.int64(187), '11\",477.0': np.int64(188), '11\",481.0': np.int64(189), '11\",483.0': np.int64(190), '11\",485.0': np.int64(191), '11\",505.0': np.int64(192), '11\",529.0': np.int64(193), '11\",538.0': np.int64(194), '11\",540.0': np.int64(195), '11\",541.0': np.int64(196), '11\",547.0': np.int64(197), '11\",548.0': np.int64(198), '11\",556.0': np.int64(199), '11\",576.0': np.int64(200), '11\",577.0': np.int64(201), '11\",584.0': np.int64(202), '11\",598.0': np.int64(203), '11\",608.0': np.int64(204), '11\",612.0': np.int64(205), '11\",642.0': np.int64(206), '11\",648.0': np.int64(207), '11\",68.0': np.int64(208), '11\",70.0': np.int64(209), '11\",72.0': np.int64(210), '11\",74.0': np.int64(211), '11\",75.0': np.int64(212), '11\",76.0': np.int64(213), '11\",79.0': np.int64(214), '11\",82.0': np.int64(215), '11\",86.0': np.int64(216), '11\",88.0': np.int64(217), '11\",90.0': np.int64(218), '11\",96.0': np.int64(219), '12\",': np.int64(220), '12\",102.0': np.int64(221), '12\",12.0': np.int64(222), '12\",130.0': np.int64(223), '12\",134.0': np.int64(224), '12\",142.0': np.int64(225), '12\",156.0': np.int64(226), '12\",19.0': np.int64(227), '12\",2.0': np.int64(228), '12\",205.0': np.int64(229), '12\",206.0': np.int64(230), '12\",208.0': np.int64(231), '12\",21.0': np.int64(232), '12\",211.0': np.int64(233), '12\",215.0': np.int64(234), '12\",220.0': np.int64(235), '12\",223.0': np.int64(236), '12\",224.0': np.int64(237), '12\",225.0': np.int64(238), '12\",235.0': np.int64(239), '12\",244.0': np.int64(240), '12\",249.0': np.int64(241), '12\",25.0': np.int64(242), '12\",26.0': np.int64(243), '12\",268.0': np.int64(244), '12\",271.0': np.int64(245), '12\",285.0': np.int64(246), '12\",29.0': np.int64(247), '12\",298.0': np.int64(248), '12\",299.0': np.int64(249), '12\",302.0': np.int64(250), '12\",308.0': np.int64(251), '12\",311.0': np.int64(252), '12\",317.0': np.int64(253), '12\",319.0': np.int64(254), '12\",33.0': np.int64(255), '12\",331.0': np.int64(256), '12\",34.0': np.int64(257), '12\",38.0': np.int64(258), '12\",383.0': np.int64(259), '12\",388.0': np.int64(260), '12\",389.0': np.int64(261), '12\",39.0': np.int64(262), '12\",407.0': np.int64(263), '12\",408.0': np.int64(264), '12\",424.0': np.int64(265), '12\",437.0': np.int64(266), '12\",438.0': np.int64(267), '12\",463.0': np.int64(268), '12\",470.0': np.int64(269), '12\",471.0': np.int64(270), '12\",49.0': np.int64(271), '12\",53.0': np.int64(272), '12\",534.0': np.int64(273), '12\",537.0': np.int64(274), '12\",542.0': np.int64(275), '12\",544.0': np.int64(276), '12\",55.0': np.int64(277), '12\",553.0': np.int64(278), '12\",562.0': np.int64(279), '12\",607.0': np.int64(280), '12\",609.0': np.int64(281), '12\",614.0': np.int64(282), '12\",628.0': np.int64(283), '12\",631.0': np.int64(284), '12\",64.0': np.int64(285), '12\",66.0': np.int64(286), '12\",80.0': np.int64(287), '12\",84.0': np.int64(288), '12\",85.0': np.int64(289), '12\",92.0': np.int64(290), '12\",94.0': np.int64(291), '12\",97.0': np.int64(292), '13\",': np.int64(293), '13\",11.0': np.int64(294), '13\",121.0': np.int64(295), '13\",122.0': np.int64(296), '13\",123.0': np.int64(297), '13\",129.0': np.int64(298), '13\",13.0': np.int64(299), '13\",133.0': np.int64(300), '13\",141.0': np.int64(301), '13\",151.0': np.int64(302), '13\",153.0': np.int64(303), '13\",159.0': np.int64(304), '13\",165.0': np.int64(305), '13\",167.0': np.int64(306), '13\",182.0': np.int64(307), '13\",187.0': np.int64(308), '13\",193.0': np.int64(309), '13\",195.0': np.int64(310), '13\",204.0': np.int64(311), '13\",217.0': np.int64(312), '13\",218.0': np.int64(313), '13\",222.0': np.int64(314), '13\",226.0': np.int64(315), '13\",232.0': np.int64(316), '13\",233.0': np.int64(317), '13\",245.0': np.int64(318), '13\",246.0': np.int64(319), '13\",252.0': np.int64(320), '13\",261.0': np.int64(321), '13\",278.0': np.int64(322), '13\",28.0': np.int64(323), '13\",286.0': np.int64(324), '13\",288.0': np.int64(325), '13\",294.0': np.int64(326), '13\",303.0': np.int64(327), '13\",304.0': np.int64(328), '13\",313.0': np.int64(329), '13\",320.0': np.int64(330), '13\",326.0': np.int64(331), '13\",328.0': np.int64(332), '13\",341.0': np.int64(333), '13\",346.0': np.int64(334), '13\",362.0': np.int64(335), '13\",366.0': np.int64(336), '13\",37.0': np.int64(337), '13\",372.0': np.int64(338), '13\",377.0': np.int64(339), '13\",380.0': np.int64(340), '13\",395.0': np.int64(341), '13\",4.0': np.int64(342), '13\",402.0': np.int64(343), '13\",406.0': np.int64(344), '13\",422.0': np.int64(345), '13\",449.0': np.int64(346), '13\",458.0': np.int64(347), '13\",46.0': np.int64(348), '13\",468.0': np.int64(349), '13\",469.0': np.int64(350), '13\",48.0': np.int64(351), '13\",495.0': np.int64(352), '13\",5.0': np.int64(353), '13\",50.0': np.int64(354), '13\",501.0': np.int64(355), '13\",504.0': np.int64(356), '13\",54.0': np.int64(357), '13\",550.0': np.int64(358), '13\",551.0': np.int64(359), '13\",555.0': np.int64(360), '13\",559.0': np.int64(361), '13\",592.0': np.int64(362), '13\",6.0': np.int64(363), '13\",602.0': np.int64(364), '13\",619.0': np.int64(365), '13\",621.0': np.int64(366), '13\",63.0': np.int64(367), '13\",7.0': np.int64(368), '13\",77.0': np.int64(369), '13\",83.0': np.int64(370), '13\",9.0': np.int64(371), '13\",91.0': np.int64(372), '13\",95.0': np.int64(373), '13\",98.0': np.int64(374), '13\",99.0': np.int64(375), '14\",': np.int64(376), '14\",10.0': np.int64(377), '14\",107.0': np.int64(378), '14\",109.0': np.int64(379), '14\",110.0': np.int64(380), '14\",115.0': np.int64(381), '14\",119.0': np.int64(382), '14\",120.0': np.int64(383), '14\",135.0': np.int64(384), '14\",147.0': np.int64(385), '14\",16.0': np.int64(386), '14\",17.0': np.int64(387), '14\",190.0': np.int64(388), '14\",197.0': np.int64(389), '14\",199.0': np.int64(390), '14\",20.0': np.int64(391), '14\",202.0': np.int64(392), '14\",210.0': np.int64(393), '14\",22.0': np.int64(394), '14\",236.0': np.int64(395), '14\",247.0': np.int64(396), '14\",266.0': np.int64(397), '14\",292.0': np.int64(398), '14\",293.0': np.int64(399), '14\",295.0': np.int64(400), '14\",3.0': np.int64(401), '14\",307.0': np.int64(402), '14\",309.0': np.int64(403), '14\",329.0': np.int64(404), '14\",330.0': np.int64(405), '14\",333.0': np.int64(406), '14\",342.0': np.int64(407), '14\",355.0': np.int64(408), '14\",36.0': np.int64(409), '14\",360.0': np.int64(410), '14\",363.0': np.int64(411), '14\",367.0': np.int64(412), '14\",376.0': np.int64(413), '14\",390.0': np.int64(414), '14\",391.0': np.int64(415), '14\",397.0': np.int64(416), '14\",398.0': np.int64(417), '14\",401.0': np.int64(418), '14\",418.0': np.int64(419), '14\",433.0': np.int64(420), '14\",442.0': np.int64(421), '14\",461.0': np.int64(422), '14\",462.0': np.int64(423), '14\",467.0': np.int64(424), '14\",475.0': np.int64(425), '14\",496.0': np.int64(426), '14\",498.0': np.int64(427), '14\",503.0': np.int64(428), '14\",526.0': np.int64(429), '14\",536.0': np.int64(430), '14\",58.0': np.int64(431), '14\",591.0': np.int64(432), '14\",593.0': np.int64(433), '14\",599.0': np.int64(434), '14\",600.0': np.int64(435), '14\",616.0': np.int64(436), '14\",633.0': np.int64(437), '14\",73.0': np.int64(438), '14\",93.0': np.int64(439), '15\",': np.int64(440), '15\",117.0': np.int64(441), '15\",128.0': np.int64(442), '15\",139.0': np.int64(443), '15\",14.0': np.int64(444), '15\",188.0': np.int64(445), '15\",214.0': np.int64(446), '15\",216.0': np.int64(447), '15\",221.0': np.int64(448), '15\",229.0': np.int64(449), '15\",258.0': np.int64(450), '15\",265.0': np.int64(451), '15\",267.0': np.int64(452), '15\",269.0': np.int64(453), '15\",270.0': np.int64(454), '15\",272.0': np.int64(455), '15\",300.0': np.int64(456), '15\",31.0': np.int64(457), '15\",315.0': np.int64(458), '15\",32.0': np.int64(459), '15\",321.0': np.int64(460), '15\",334.0': np.int64(461), '15\",339.0': np.int64(462), '15\",340.0': np.int64(463), '15\",345.0': np.int64(464), '15\",351.0': np.int64(465), '15\",354.0': np.int64(466), '15\",358.0': np.int64(467), '15\",375.0': np.int64(468), '15\",381.0': np.int64(469), '15\",386.0': np.int64(470), '15\",387.0': np.int64(471), '15\",392.0': np.int64(472), '15\",393.0': np.int64(473), '15\",403.0': np.int64(474), '15\",409.0': np.int64(475), '15\",411.0': np.int64(476), '15\",414.0': np.int64(477), '15\",42.0': np.int64(478), '15\",450.0': np.int64(479), '15\",456.0': np.int64(480), '15\",517.0': np.int64(481), '15\",56.0': np.int64(482), '15\",611.0': np.int64(483), '15\",615.0': np.int64(484), '15\",618.0': np.int64(485), '15\",620.0': np.int64(486), '15\",641.0': np.int64(487), '15\",69.0': np.int64(488), '15\",87.0': np.int64(489), '16\",': np.int64(490), '16\",101.0': np.int64(491), '16\",104.0': np.int64(492), '16\",116.0': np.int64(493), '16\",198.0': np.int64(494), '16\",201.0': np.int64(495), '16\",209.0': np.int64(496), '16\",212.0': np.int64(497), '16\",238.0': np.int64(498), '16\",243.0': np.int64(499), '16\",250.0': np.int64(500), '16\",276.0': np.int64(501), '16\",296.0': np.int64(502), '16\",306.0': np.int64(503), '16\",312.0': np.int64(504), '16\",316.0': np.int64(505), '16\",336.0': np.int64(506), '16\",348.0': np.int64(507), '16\",394.0': np.int64(508), '16\",404.0': np.int64(509), '16\",439.0': np.int64(510), '16\",472.0': np.int64(511), '16\",499.0': np.int64(512), '16\",51.0': np.int64(513), '16\",516.0': np.int64(514), '16\",525.0': np.int64(515), '16\",533.0': np.int64(516), '16\",546.0': np.int64(517), '16\",57.0': np.int64(518), '16\",59.0': np.int64(519), '16\",60.0': np.int64(520), '16\",61.0': np.int64(521), '16\",623.0': np.int64(522), '16\",634.0': np.int64(523), '16\",638.0': np.int64(524), '16\",645.0': np.int64(525), '16\",65.0': np.int64(526), '17\",': np.int64(527), '17\",15.0': np.int64(528), '17\",183.0': np.int64(529), '17\",196.0': np.int64(530), '17\",240.0': np.int64(531), '17\",289.0': np.int64(532), '17\",335.0': np.int64(533), '17\",343.0': np.int64(534), '17\",344.0': np.int64(535), '17\",356.0': np.int64(536), '17\",357.0': np.int64(537), '17\",359.0': np.int64(538), '17\",364.0': np.int64(539), '17\",365.0': np.int64(540), '17\",374.0': np.int64(541), '17\",378.0': np.int64(542), '17\",396.0': np.int64(543), '17\",399.0': np.int64(544), '17\",400.0': np.int64(545), '17\",410.0': np.int64(546), '17\",412.0': np.int64(547), '17\",417.0': np.int64(548), '17\",420.0': np.int64(549), '17\",427.0': np.int64(550), '17\",448.0': np.int64(551), '17\",47.0': np.int64(552), '17\",510.0': np.int64(553), '17\",595.0': np.int64(554), '17\",630.0': np.int64(555), '17\",8.0': np.int64(556), '18\",': np.int64(557), '18\",113.0': np.int64(558), '18\",181.0': np.int64(559), '18\",185.0': np.int64(560), '18\",314.0': np.int64(561), '18\",327.0': np.int64(562), '18\",332.0': np.int64(563), '18\",337.0': np.int64(564), '18\",349.0': np.int64(565), '18\",416.0': np.int64(566), '18\",509.0': np.int64(567), '18\",549.0': np.int64(568), '18\",594.0': np.int64(569), '18\",596.0': np.int64(570), '18\",606.0': np.int64(571), '18\",617.0': np.int64(572), '19\",': np.int64(573), '19\",338.0': np.int64(574), '19\",636.0': np.int64(575), '20\",': np.int64(576), '4\",': np.int64(577), '5\",': np.int64(578), '5\",279.0': np.int64(579), '6\",': np.int64(580), '6\",155.0': np.int64(581), '6\",284.0': np.int64(582), '6\",523.0': np.int64(583), '7\",': np.int64(584), '7\",18.0': np.int64(585), '7\",255.0': np.int64(586), '7\",282.0': np.int64(587), '7\",432.0': np.int64(588), '7\",500.0': np.int64(589), '7\",512.0': np.int64(590), '7\",514.0': np.int64(591), '7\",572.0': np.int64(592), '7\",582.0': np.int64(593), '7\",590.0': np.int64(594), '8\",': np.int64(595), '8\",100.0': np.int64(596), '8\",131.0': np.int64(597), '8\",161.0': np.int64(598), '8\",168.0': np.int64(599), '8\",175.0': np.int64(600), '8\",177.0': np.int64(601), '8\",178.0': np.int64(602), '8\",179.0': np.int64(603), '8\",219.0': np.int64(604), '8\",239.0': np.int64(605), '8\",256.0': np.int64(606), '8\",262.0': np.int64(607), '8\",263.0': np.int64(608), '8\",347.0': np.int64(609), '8\",436.0': np.int64(610), '8\",443.0': np.int64(611), '8\",453.0': np.int64(612), '8\",454.0': np.int64(613), '8\",465.0': np.int64(614), '8\",476.0': np.int64(615), '8\",478.0': np.int64(616), '8\",484.0': np.int64(617), '8\",513.0': np.int64(618), '8\",518.0': np.int64(619), '8\",520.0': np.int64(620), '8\",522.0': np.int64(621), '8\",524.0': np.int64(622), '8\",532.0': np.int64(623), '8\",543.0': np.int64(624), '8\",545.0': np.int64(625), '8\",569.0': np.int64(626), '8\",570.0': np.int64(627), '8\",581.0': np.int64(628), '8\",585.0': np.int64(629), '8\",587.0': np.int64(630), '9\",': np.int64(631), '9\",125.0': np.int64(632), '9\",148.0': np.int64(633), '9\",150.0': np.int64(634), '9\",174.0': np.int64(635), '9\",248.0': np.int64(636), '9\",257.0': np.int64(637), '9\",305.0': np.int64(638), '9\",370.0': np.int64(639), '9\",428.0': np.int64(640), '9\",441.0': np.int64(641), '9\",445.0': np.int64(642), '9\",447.0': np.int64(643), '9\",455.0': np.int64(644), '9\",482.0': np.int64(645), '9\",488.0': np.int64(646), '9\",491.0': np.int64(647), '9\",494.0': np.int64(648), '9\",502.0': np.int64(649), '9\",508.0': np.int64(650), '9\",52.0': np.int64(651), '9\",528.0': np.int64(652), '9\",530.0': np.int64(653), '9\",565.0': np.int64(654), '9\",566.0': np.int64(655), '9\",568.0': np.int64(656), '9\",571.0': np.int64(657), '9\",579.0': np.int64(658), '9\",588.0': np.int64(659), '9\",622.0': np.int64(660), '9\",624.0': np.int64(661), '9\",629.0': np.int64(662), '9\",632.0': np.int64(663), '9\",635.0': np.int64(664), '9\",646.0': np.int64(665), '9\",81.0': np.int64(666)}\n",
      "\n",
      "Label Encoded Shape: (1044, 33)\n",
      "\n",
      "First few rows of label encoded data:\n",
      "   ,school  sex  age  address  famsize  Pstatus  Medu  Fedu  Mjob  Fjob  ...  \\\n",
      "0        0    0   18        1        0        0     4     4     0     4  ...   \n",
      "1        1    0   17        1        0        1     1     1     0     2  ...   \n",
      "2      112    0   15        1        1        1     1     1     0     2  ...   \n",
      "3      223    0   15        1        0        1     4     2     1     3  ...   \n",
      "4      380    0   16        1        0        1     3     3     2     2  ...   \n",
      "\n",
      "   famrel  freetime  goout  Dalc  Walc  health  absences  G1  G2  \\\n",
      "0       4         3      4     1     1       3         6  13  13   \n",
      "1       5         3      3     1     1       3         4  13  12   \n",
      "2       4         3      2     2     3       3        10  15  15   \n",
      "3       3         2      2     1     1       5         2   6   5   \n",
      "4       4         3      2     1     2       5         4  14   1   \n",
      "\n",
      "   G3,Unnamed: 0  \n",
      "0            580  \n",
      "1            580  \n",
      "2             17  \n",
      "3            440  \n",
      "4             17  \n",
      "\n",
      "[5 rows x 33 columns]\n",
      "\n",
      "Label encoded data saved to: data\\student_label_encoded.csv\n",
      "\n",
      "================================================================================\n",
      "METHOD 3: ORDINAL ENCODING (with custom ordering)\n",
      "================================================================================\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Found unknown categories ['no\"\"', 'yes\"\"'] in column 0 during fit",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 137\u001b[0m\n\u001b[0;32m    135\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m col \u001b[38;5;129;01min\u001b[39;00m df_ordinal\u001b[38;5;241m.\u001b[39mcolumns \u001b[38;5;129;01mand\u001b[39;00m col \u001b[38;5;129;01min\u001b[39;00m categorical_cols:\n\u001b[0;32m    136\u001b[0m         oe \u001b[38;5;241m=\u001b[39m OrdinalEncoder(categories\u001b[38;5;241m=\u001b[39m[order])\n\u001b[1;32m--> 137\u001b[0m         df_ordinal[col] \u001b[38;5;241m=\u001b[39m oe\u001b[38;5;241m.\u001b[39mfit_transform(df_ordinal[[col]])\n\u001b[0;32m    138\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mcol\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00morder\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m -> \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(order)))\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    140\u001b[0m \u001b[38;5;66;03m# For remaining categorical columns, use label encoding\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda\\Lib\\site-packages\\sklearn\\utils\\_set_output.py:319\u001b[0m, in \u001b[0;36m_wrap_method_output.<locals>.wrapped\u001b[1;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[0;32m    317\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(f)\n\u001b[0;32m    318\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21mwrapped\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m--> 319\u001b[0m     data_to_wrap \u001b[38;5;241m=\u001b[39m f(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    320\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data_to_wrap, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[0;32m    321\u001b[0m         \u001b[38;5;66;03m# only wrap the first output for cross decomposition\u001b[39;00m\n\u001b[0;32m    322\u001b[0m         return_tuple \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    323\u001b[0m             _wrap_data_with_container(method, data_to_wrap[\u001b[38;5;241m0\u001b[39m], X, \u001b[38;5;28mself\u001b[39m),\n\u001b[0;32m    324\u001b[0m             \u001b[38;5;241m*\u001b[39mdata_to_wrap[\u001b[38;5;241m1\u001b[39m:],\n\u001b[0;32m    325\u001b[0m         )\n",
      "File \u001b[1;32m~\\anaconda\\Lib\\site-packages\\sklearn\\base.py:918\u001b[0m, in \u001b[0;36mTransformerMixin.fit_transform\u001b[1;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[0;32m    903\u001b[0m         warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m    904\u001b[0m             (\n\u001b[0;32m    905\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThis object (\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m) has a `transform`\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    913\u001b[0m             \u001b[38;5;167;01mUserWarning\u001b[39;00m,\n\u001b[0;32m    914\u001b[0m         )\n\u001b[0;32m    916\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    917\u001b[0m     \u001b[38;5;66;03m# fit method of arity 1 (unsupervised transformation)\u001b[39;00m\n\u001b[1;32m--> 918\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n\u001b[0;32m    919\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    920\u001b[0m     \u001b[38;5;66;03m# fit method of arity 2 (supervised transformation)\u001b[39;00m\n\u001b[0;32m    921\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n",
      "File \u001b[1;32m~\\anaconda\\Lib\\site-packages\\sklearn\\base.py:1389\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1382\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1384\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1385\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1386\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1387\u001b[0m     )\n\u001b[0;32m   1388\u001b[0m ):\n\u001b[1;32m-> 1389\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fit_method(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda\\Lib\\site-packages\\sklearn\\preprocessing\\_encoders.py:1515\u001b[0m, in \u001b[0;36mOrdinalEncoder.fit\u001b[1;34m(self, X, y)\u001b[0m\n\u001b[0;32m   1508\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[0;32m   1509\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124munknown_value should only be set when \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1510\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhandle_unknown is \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124muse_encoded_value\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1511\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgot \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39munknown_value\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1512\u001b[0m     )\n\u001b[0;32m   1514\u001b[0m \u001b[38;5;66;03m# `_fit` will only raise an error when `self.handle_unknown=\"error\"`\u001b[39;00m\n\u001b[1;32m-> 1515\u001b[0m fit_results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit(\n\u001b[0;32m   1516\u001b[0m     X,\n\u001b[0;32m   1517\u001b[0m     handle_unknown\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandle_unknown,\n\u001b[0;32m   1518\u001b[0m     ensure_all_finite\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mallow-nan\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   1519\u001b[0m     return_and_ignore_missing_for_infrequent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[0;32m   1520\u001b[0m )\n\u001b[0;32m   1521\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_missing_indices \u001b[38;5;241m=\u001b[39m fit_results[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmissing_indices\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m   1523\u001b[0m cardinalities \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mlen\u001b[39m(categories) \u001b[38;5;28;01mfor\u001b[39;00m categories \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcategories_]\n",
      "File \u001b[1;32m~\\anaconda\\Lib\\site-packages\\sklearn\\preprocessing\\_encoders.py:164\u001b[0m, in \u001b[0;36m_BaseEncoder._fit\u001b[1;34m(self, X, handle_unknown, ensure_all_finite, return_counts, return_and_ignore_missing_for_infrequent)\u001b[0m\n\u001b[0;32m    159\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m diff:\n\u001b[0;32m    160\u001b[0m         msg \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    161\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound unknown categories \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m in column \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    162\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m during fit\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(diff, i)\n\u001b[0;32m    163\u001b[0m         )\n\u001b[1;32m--> 164\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n\u001b[0;32m    165\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m compute_counts:\n\u001b[0;32m    166\u001b[0m     category_counts\u001b[38;5;241m.\u001b[39mappend(_get_counts(Xi, cats))\n",
      "\u001b[1;31mValueError\u001b[0m: Found unknown categories ['no\"\"', 'yes\"\"'] in column 0 during fit"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder, OrdinalEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "import os\n",
    "from pathlib import Path\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Folder convention: keep raw files under ./data/raw\n",
    "DATA_DIR = Path(\"data\")\n",
    "RAW_DIR = DATA_DIR / \"raw\"\n",
    "RAW_DIR.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "# 1. Read the file. Load cleaned data CSV (UCI files use semicolon separator)\n",
    "# Try multiple possible locations\n",
    "possible_paths = [\n",
    "    Path(\"student_clean.csv\"),                 # Current directory (most likely)\n",
    "    DATA_DIR / \"student_clean.csv\",           # ./data/student_clean.csv\n",
    "    Path(\"rawdata_merged_student.csv\"),       # Alternative filename in current dir\n",
    "    Path(\"student-mat.csv\"),                  # Another possible file\n",
    "    Path(\"student-por.csv\"),                  # Another possible file\n",
    "]\n",
    "\n",
    "df = None\n",
    "for file_path in possible_paths:\n",
    "    if file_path.exists():\n",
    "        try:\n",
    "            # Try with semicolon separator first\n",
    "            df = pd.read_csv(file_path, sep=\";\")\n",
    "            print(f\"âœ“ Data loaded successfully from: {file_path}\")\n",
    "            print(f\"  Shape: {df.shape}\")\n",
    "            print(f\"\\nFirst few rows:\\n{df.head()}\")\n",
    "            break\n",
    "        except Exception as e:\n",
    "            # If semicolon fails, try comma separator\n",
    "            try:\n",
    "                df = pd.read_csv(file_path, sep=\",\")\n",
    "                print(f\"âœ“ Data loaded successfully from: {file_path} (using comma separator)\")\n",
    "                print(f\"  Shape: {df.shape}\")\n",
    "                print(f\"\\nFirst few rows:\\n{df.head()}\")\n",
    "                break\n",
    "            except:\n",
    "                print(f\"âœ— Error reading {file_path}: {e}\")\n",
    "                continue\n",
    "\n",
    "if df is None:\n",
    "    print(\"\\n\" + \"=\"*80)\n",
    "    print(\"ERROR: Could not find or read 'student_clean.csv'\")\n",
    "    print(\"=\"*80)\n",
    "    print(f\"Current working directory: {Path.cwd()}\")\n",
    "    print(\"\\nAvailable CSV files in current directory:\")\n",
    "    for file in Path.cwd().glob(\"*.csv\"):\n",
    "        print(f\"  â€¢ {file.name}\")\n",
    "    print(\"\\nðŸ“‹ SOLUTION:\")\n",
    "    print(\"Please specify which file to use by uncommenting ONE of these lines:\")\n",
    "    print(\"# df = pd.read_csv('student_clean.csv', sep=';')\")\n",
    "    print(\"# df = pd.read_csv('rawdata_merged_student.csv', sep=';')\")\n",
    "    print(\"# df = pd.read_csv('student-mat.csv', sep=';')\")\n",
    "    print(\"\\nOr create 'student_clean.csv' in the current directory or data folder.\")\n",
    "    raise FileNotFoundError(\"Could not find student data file\")\n",
    "\n",
    "# Identify categorical columns (object type columns)\n",
    "categorical_cols = df.select_dtypes(include='object').columns.tolist()\n",
    "print(f\"\\nCategorical columns found: {categorical_cols}\")\n",
    "\n",
    "# Identify numerical columns\n",
    "numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
    "print(f\"Numerical columns: {numerical_cols}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"METHOD 1: ONE-HOT ENCODING\")\n",
    "print(\"=\"*80)\n",
    "# One-Hot Encoding: Creates binary columns for each category\n",
    "# Best for nominal categorical variables (no inherent order)\n",
    "\n",
    "# Using pandas get_dummies (simplest approach)\n",
    "df_onehot = pd.get_dummies(df, columns=categorical_cols, drop_first=False, dtype=int)\n",
    "print(f\"\\nOne-Hot Encoded Shape: {df_onehot.shape}\")\n",
    "print(f\"Column count increased from {len(df.columns)} to {len(df_onehot.columns)}\")\n",
    "print(f\"\\nFirst few rows of encoded data:\\n{df_onehot.head()}\")\n",
    "\n",
    "# Save one-hot encoded data\n",
    "df_onehot.to_csv(DATA_DIR / 'student_onehot_encoded.csv', index=False)\n",
    "print(f\"\\nOne-hot encoded data saved to: {DATA_DIR / 'student_onehot_encoded.csv'}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"METHOD 2: LABEL ENCODING\")\n",
    "print(\"=\"*80)\n",
    "# Label Encoding: Converts each category to a number (0, 1, 2, ...)\n",
    "# Best for ordinal data OR when you want to reduce dimensionality\n",
    "# WARNING: Can imply false ordering for nominal variables\n",
    "\n",
    "df_label = df.copy()\n",
    "label_encoders = {}\n",
    "\n",
    "for col in categorical_cols:\n",
    "    le = LabelEncoder()\n",
    "    df_label[col] = le.fit_transform(df_label[col])\n",
    "    label_encoders[col] = le\n",
    "    print(f\"\\n{col}: {dict(zip(le.classes_, le.transform(le.classes_)))}\")\n",
    "\n",
    "print(f\"\\nLabel Encoded Shape: {df_label.shape}\")\n",
    "print(f\"\\nFirst few rows of label encoded data:\\n{df_label.head()}\")\n",
    "\n",
    "# Save label encoded data\n",
    "df_label.to_csv(DATA_DIR / 'student_label_encoded.csv', index=False)\n",
    "print(f\"\\nLabel encoded data saved to: {DATA_DIR / 'student_label_encoded.csv'}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"METHOD 3: ORDINAL ENCODING (with custom ordering)\")\n",
    "print(\"=\"*80)\n",
    "# Ordinal Encoding: Like label encoding but you specify the order\n",
    "# Best for ordinal categorical variables with meaningful order\n",
    "\n",
    "df_ordinal = df.copy()\n",
    "\n",
    "# Define ordinal columns and their order\n",
    "# Based on your data description, these columns have inherent order:\n",
    "ordinal_mappings = {\n",
    "    'Medu': [0, 1, 2, 3, 4],  # Education levels already numeric\n",
    "    'Fedu': [0, 1, 2, 3, 4],  # Education levels already numeric\n",
    "    # For yes/no columns, we can map them\n",
    "    'schoolsup': ['no', 'yes'],\n",
    "    'famsup': ['no', 'yes'],\n",
    "    'paid': ['no', 'yes'],\n",
    "    'activities': ['no', 'yes'],\n",
    "    'nursery': ['no', 'yes'],\n",
    "    'higher': ['no', 'yes'],\n",
    "    'internet': ['no', 'yes'],\n",
    "    'romantic': ['no', 'yes']\n",
    "}\n",
    "\n",
    "# Apply ordinal encoding to columns that make sense\n",
    "for col, order in ordinal_mappings.items():\n",
    "    if col in df_ordinal.columns and col in categorical_cols:\n",
    "        oe = OrdinalEncoder(categories=[order])\n",
    "        df_ordinal[col] = oe.fit_transform(df_ordinal[[col]])\n",
    "        print(f\"\\n{col}: {order} -> {list(range(len(order)))}\")\n",
    "\n",
    "# For remaining categorical columns, use label encoding\n",
    "remaining_categorical = [col for col in categorical_cols if col not in ordinal_mappings.keys()]\n",
    "for col in remaining_categorical:\n",
    "    le = LabelEncoder()\n",
    "    df_ordinal[col] = le.fit_transform(df_ordinal[col])\n",
    "    print(f\"\\n{col}: {dict(zip(le.classes_, le.transform(le.classes_)))}\")\n",
    "\n",
    "print(f\"\\nOrdinal Encoded Shape: {df_ordinal.shape}\")\n",
    "print(f\"\\nFirst few rows of ordinal encoded data:\\n{df_ordinal.head()}\")\n",
    "\n",
    "# Save ordinal encoded data\n",
    "df_ordinal.to_csv(DATA_DIR / 'student_ordinal_encoded.csv', index=False)\n",
    "print(f\"\\nOrdinal encoded data saved to: {DATA_DIR / 'student_ordinal_encoded.csv'}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"METHOD 4: MIXED ENCODING using ColumnTransformer\")\n",
    "print(\"=\"*80)\n",
    "# Using ColumnTransformer for applying different encodings to different columns\n",
    "# This is useful when you want to apply different strategies to different columns\n",
    "\n",
    "# Define which columns get which encoding\n",
    "binary_cols = ['school', 'sex', 'address', 'famsize', 'Pstatus', 'schoolsup', \n",
    "               'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic']\n",
    "nominal_cols = ['Mjob', 'Fjob', 'reason', 'guardian']\n",
    "\n",
    "# Filter to only include columns that exist in the dataframe\n",
    "binary_cols = [col for col in binary_cols if col in categorical_cols]\n",
    "nominal_cols = [col for col in nominal_cols if col in categorical_cols]\n",
    "\n",
    "ct = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('onehot', OneHotEncoder(sparse_output=False, drop='first'), nominal_cols),  # One-hot for nominal\n",
    "        ('label', OrdinalEncoder(), binary_cols)  # Ordinal for binary (saves space)\n",
    "    ],\n",
    "    remainder='passthrough'  # Keep numerical columns as they are\n",
    ")\n",
    "\n",
    "# Fit and transform\n",
    "transformed_array = ct.fit_transform(df)\n",
    "\n",
    "# Get feature names for the transformed data\n",
    "feature_names = []\n",
    "# One-hot encoded columns\n",
    "onehot_features = ct.named_transformers_['onehot'].get_feature_names_out(nominal_cols)\n",
    "feature_names.extend(onehot_features)\n",
    "# Binary/ordinal columns\n",
    "feature_names.extend(binary_cols)\n",
    "# Remaining numerical columns\n",
    "feature_names.extend(numerical_cols)\n",
    "\n",
    "# Convert back to DataFrame\n",
    "df_mixed = pd.DataFrame(transformed_array, columns=feature_names)\n",
    "print(f\"\\nMixed Encoding Shape: {df_mixed.shape}\")\n",
    "print(f\"\\nFirst few rows of mixed encoded data:\\n{df_mixed.head()}\")\n",
    "\n",
    "# Save mixed encoded data\n",
    "df_mixed.to_csv(DATA_DIR / 'student_mixed_encoded.csv', index=False)\n",
    "print(f\"\\nMixed encoded data saved to: {DATA_DIR / 'student_mixed_encoded.csv'}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"SUMMARY\")\n",
    "print(\"=\"*80)\n",
    "print(f\"Original data shape: {df.shape}\")\n",
    "print(f\"One-Hot Encoded: {df_onehot.shape} - Best for nominal categories, but creates many columns\")\n",
    "print(f\"Label Encoded: {df_label.shape} - Compact, but implies false ordering\")\n",
    "print(f\"Ordinal Encoded: {df_ordinal.shape} - Good for ordered categories\")\n",
    "print(f\"Mixed Encoded: {df_mixed.shape} - Balanced approach using different methods\")\n",
    "print(\"\\nAll encoded datasets have been saved to the data directory!\")\n",
    "print(\"\\nRecommendation: For machine learning with this student dataset,\")\n",
    "print(\"use One-Hot encoding or Mixed encoding approach for best results.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55c1d27a-ff06-4d40-bc85-10cc5ac45960",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
