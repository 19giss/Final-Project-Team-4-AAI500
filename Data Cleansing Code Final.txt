# Group 4 selected the Student Performance dataset
#
# Dataset link is https://archive.ics.uci.edu/dataset/320/student+performance
#
# Dataset contains 2 excel files student-mat.csv (Math course) and student-por.csv (Portuguese language course) 
#
# Attributes for both student-mat.csv (Math course) and student-por.csv (Portuguese language course) datasets:
#
#         1 school - student's school (binary: "GP" - Gabriel Pereira or "MS" - Mousinho da Silveira)
#         2 sex - student's sex (binary: "F" - female or "M" - male)
#         3 age - student's age (numeric: from 15 to 22)
#         4 address - student's home address type (binary: "U" - urban or "R" - rural)
#         5 famsize - family size (binary: "LE3" - less or equal to 3 or "GT3" - greater than 3)
#         6 Pstatus - parent's cohabitation status (binary: "T" - living together or "A" - apart)
#         7 Medu - mother's education (numeric: 0 - none,  1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)
#         8 Fedu - father's education (numeric: 0 - none,  1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)
#         9 Mjob - mother's job (nominal: "teacher", "health" care related, civil "services" (e.g. administrative or police), "at_home" or "other")
#        10 Fjob - father's job (nominal: "teacher", "health" care related, civil "services" (e.g. administrative or police), "at_home" or "other")
#        11 reason - reason to choose this school (nominal: close to "home", school "reputation", "course" preference or "other")
#        12 guardian - student's guardian (nominal: "mother", "father" or "other")
#        13 traveltime - home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)
#        14 studytime - weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)
#        15 failures - number of past class failures (numeric: n if 1<=n<3, else 4)
#        16 schoolsup - extra educational support (binary: yes or no)
#        17 famsup - family educational support (binary: yes or no)
#        18 paid - extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)
#        19 activities - extra-curricular activities (binary: yes or no)
#        20 nursery - attended nursery school (binary: yes or no)
#        21 higher - wants to take higher education (binary: yes or no)
#        22 internet - Internet access at home (binary: yes or no)
#        23 romantic - with a romantic relationship (binary: yes or no)
#        24 famrel - quality of family relationships (numeric: from 1 - very bad to 5 - excellent)
#        25 freetime - free time after school (numeric: from 1 - very low to 5 - very high)
#        26 goout - going out with friends (numeric: from 1 - very low to 5 - very high)
#        27 Dalc - workday alcohol consumption (numeric: from 1 - very low to 5 - very high)
#        28 Walc - weekend alcohol consumption (numeric: from 1 - very low to 5 - very high)
#        29 health - current health status (numeric: from 1 - very bad to 5 - very good)
#        30 absences - number of school absences (numeric: from 0 to 93)
#
#        these grades are related with the course subject, Math or Portuguese:
#        31 G1 - first period grade (numeric: from 0 to 20)
#        31 G2 - second period grade (numeric: from 0 to 20)
#        32 G3 - final grade (numeric: from 0 to 20, output target)
#
#        Additional note: there are several (382) students that belong to both datasets . 
#        These students can be identified by searching for identical attributes that characterize each student, as shown in the R code below.
#
#        d1=read.table("student-mat.csv",sep=";",header=TRUE)
#
#        d2=read.table("student-por.csv",sep=";",header=TRUE)
#
#        d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
#
#        print(nrow(d3)) # 382 students
#
# ****************************************************************************************************************************************************************
#   The First Step in the project is data cleansing.
#
#   Data cleaning includes:
#      1.) Import data
#      2.) Inspect data to understand the dataset
#      3.) Save a copy of the raw data
#      4.) Merge datasets
#      5.) Save a copy of the merged datasets
#      6.) Check for missing data
#      7.) Check for duplicates
#      8.) Check for data that is not formatted correctly or incorrect data
#      9.) Save a copy of cleaned data
#
# *****************************************************************************************************************************************************************
#
#  Data cleaning Step 1.) Import data
import pandas as pd
import os

# Read first dataset 
# df = pd.read_csv('C:/Users/Woote/anaconda_projects/f362e33e-8746-46ca-901e-d486d4c46a94/student-mat.csv')
df = pd.read_csv('C:/Users/Woote/student-mat.csv')

# ******************************************************************************************************************************************************************
# Data cleaning Step 2.) Inspect data to understand the dataset
#
#     df.info() This method provides a summary of data types, column names, and missing values
#
# *****************************************************************************************************************************************************************

df.info()

# *****************************************************************************************************************************************************************
# Data cleaning Step 2.) Inspect data to understand the dataset
#
#     df.head() This method displays rows of the data as a preview
#
# *****************************************************************************************************************************************************************

df.head()

# *****************************************************************************************************************************************************************
# Data cleaning Step 3.) Save a copy of the raw data
# Save the student-mat.csv to a CSV file named "rawdata_student-mat.csv"
#
# ******************************************************************************************************************************************************************
df.to_csv('rawdata_student-mat.csv') 

# ******************************************************************************************************
# Repeat Data cleansing steps 1 - 3 for the second dataset - student-por.csv
# ******************************************************************************************************


# *****************************************************************************************************************************************************************
#
#  Data cleaning Step 1.) Import data
import pandas as pd
import os

# Read first dataset 
# df = pd.read_csv('C:/Users/Woote/anaconda_projects/f362e33e-8746-46ca-901e-d486d4c46a94/student-por.csv')
df = pd.read_csv('C:/Users/Woote/student-por.csv')

# ******************************************************************************************************************************************************************
# Data cleaning Step 2.) Inspect data to understand the dataset
#
#     df.info() This method provides a summary of data types, column names, and missing values
#
# *****************************************************************************************************************************************************************

df.info()

# *****************************************************************************************************************************************************************
# Data cleaning Step 2.) Inspect data to understand the dataset
#
#     df.head() This method displays rows of the data as a preview
#
# *****************************************************************************************************************************************************************

df.head()

# *****************************************************************************************************************************************************************
# Data cleaning Step 3.) Save a copy of the raw data
# Save the student-mat.csv to a CSV file named "rawdata_student-por.csv"
#
# ******************************************************************************************************************************************************************
df.to_csv('rawdata_student-por.csv') 

# *****************************************************************************************************************************************************************
# Data cleaning Step 4.) Merge datasets
# Merge datasets "student-por.csv" and "data-student-mat.csv"
# First, load the datasets if they aren't already loaded
# ******************************************************************************************************************************************************************
student_mat = pd.read_csv('student-mat.csv')  # Load math dataset
student_por = pd.read_csv('student-por.csv')  # Load Portuguese dataset
merged_student = pd.concat([student_mat, student_por], axis=0)

# *****************************************************************************************************************************************************************
# Data cleaning Step 5.) Save a copy of the merged datasets
# Save a copy of merged datasets: "student-mat" and "student-por" to a CSV file named "rawdata_merged_student.csv"
# ******************************************************************************************************************************************************************
merged_student.to_csv('rawdata_merged_student.csv') 
merged_student.to_csv('merged_student.csv') 

# *****************************************************************************************************************************************************************
# Data cleaning Step 6.)  Check for missing data
# Load merged dataset 
# Check df "merged_student" for missing data
# Create a new data frame that DOES NOT contain NULL values
# ******************************************************************************************************************************************************************
merged_student = pd.read_csv('merged_student.csv') 
merged_student_nonulls = merged_student.dropna() 
print(merged_student_nonulls.to_string())
merged_student_nonulls.to_csv('merged_student_nonulls.csv')  


# *****************************************************************************************************************************************************************
# Data cleaning Step 7.)  Check for duplicates
# 
# ******************************************************************************************************************************************************************
merged_student_nonulls = pd.read_csv('merged_student_nonulls.csv') 
merged_student_duplicates = merged_student_nonulls[merged_student_nonulls.duplicated()]
merged_student_noduplicates = merged_student_duplicates.drop_duplicates()

# *****************************************************************************************************************************************************************
# Data cleaning Step 8.)  Check for data that is not formatted correctly or incorrect data
# 
# ******************************************************************************************************************************************************************

# ***********************************************************************************************************************
# Validate school column = (binary: "GP" - Gabriel Pereira or "MS" - Mousinho da Silveira)
# ***********************************************************************************************************************
# merged_student_nonulls = pd.read_csv('merged_student_nonulls.csv')
# merged_student_nonulls['school'].isin(['GP', 'MS'])
# print(merged_student_nonulls.to_string())

# *******************************************************************************************************************************************************************
# Peer review item  1. Which function should be used for column - 
# merged_student_nonulls = pd.read_csv('merged_student_nonulls.csv')
# merged_student_nonulls['school'] == 'GP' or 'MS' or merged_student_nonulls['school'].isin(['GP', 'MS'])




